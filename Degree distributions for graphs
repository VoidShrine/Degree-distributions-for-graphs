'''
Constants
'''
EX_GRAPH0 = {0:set([1,2]),
             1:set([]),
             2:set([])}

EX_GRAPH1 = {0:set([1,4,5]),
             1:set([2,6]),
             2:set([3]),
             3:set([0]),
             4:set([1]),
             5:set([2]),
             6:set([])}

EX_GRAPH2 = {0:set([1,4,5]),
             1:set([2,6]),
             2:set([3,7]),
             3:set([7]),
             4:set([1]),
             5:set([2]),
             6:set([]),
             7:set([3]),
             8:set([1,2]),
             9:set([0,3,4,5,6,7])}

def make_complete_graph(num_nodes):
    '''
    returns a dictionary corresponding to a complete directed graph with the specified number of nodes
    '''
    dic = {}
    for idx in range(num_nodes):
        setx = set(range(idx))
        setx.update(set(range(idx + 1,num_nodes)))
        dic[idx] = setx
        
    return dic

def compute_in_degrees(digraph):
    dic = {}
    for idx in digraph:
        dic[idx] = 0
    for idx in digraph:
        for jdx in digraph[idx]:
            dic[jdx] += 1
    return dic

def in_degree_distribution(digraph):
    '''
    omputes the unnormalized distribution of the in-degrees of the graph
    '''
    dic = {}
    deg = compute_in_degrees(digraph)
    for idx in range(len(deg)):
        dic[idx] = 0
    for jdx in deg:
        dic[deg[jdx]] += 1
    for kdx in dic:
        if dic[kdx] == 0:
            del dic[kdx]
        
    return dic
